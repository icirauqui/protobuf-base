// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto3/switch_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SwitchConfig)
pub struct SwitchConfig {
    // message fields
    // @@protoc_insertion_point(field:SwitchConfig.learning_rate)
    pub learning_rate: f32,
    // @@protoc_insertion_point(field:SwitchConfig.batch_size)
    pub batch_size: i32,
    // @@protoc_insertion_point(field:SwitchConfig.epochs)
    pub epochs: i32,
    // @@protoc_insertion_point(field:SwitchConfig.dp)
    pub dp: bool,
    // @@protoc_insertion_point(field:SwitchConfig.epsilon)
    pub epsilon: f32,
    // special fields
    // @@protoc_insertion_point(special_field:SwitchConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SwitchConfig {
    fn default() -> &'a SwitchConfig {
        <SwitchConfig as ::protobuf::Message>::default_instance()
    }
}

impl SwitchConfig {
    pub fn new() -> SwitchConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "learning_rate",
            |m: &SwitchConfig| { &m.learning_rate },
            |m: &mut SwitchConfig| { &mut m.learning_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch_size",
            |m: &SwitchConfig| { &m.batch_size },
            |m: &mut SwitchConfig| { &mut m.batch_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "epochs",
            |m: &SwitchConfig| { &m.epochs },
            |m: &mut SwitchConfig| { &mut m.epochs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dp",
            |m: &SwitchConfig| { &m.dp },
            |m: &mut SwitchConfig| { &mut m.dp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "epsilon",
            |m: &SwitchConfig| { &m.epsilon },
            |m: &mut SwitchConfig| { &mut m.epsilon },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SwitchConfig>(
            "SwitchConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SwitchConfig {
    const NAME: &'static str = "SwitchConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.learning_rate = is.read_float()?;
                },
                16 => {
                    self.batch_size = is.read_int32()?;
                },
                24 => {
                    self.epochs = is.read_int32()?;
                },
                32 => {
                    self.dp = is.read_bool()?;
                },
                45 => {
                    self.epsilon = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.learning_rate != 0. {
            my_size += 1 + 4;
        }
        if self.batch_size != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.batch_size);
        }
        if self.epochs != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.epochs);
        }
        if self.dp != false {
            my_size += 1 + 1;
        }
        if self.epsilon != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.learning_rate != 0. {
            os.write_float(1, self.learning_rate)?;
        }
        if self.batch_size != 0 {
            os.write_int32(2, self.batch_size)?;
        }
        if self.epochs != 0 {
            os.write_int32(3, self.epochs)?;
        }
        if self.dp != false {
            os.write_bool(4, self.dp)?;
        }
        if self.epsilon != 0. {
            os.write_float(5, self.epsilon)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SwitchConfig {
        SwitchConfig::new()
    }

    fn clear(&mut self) {
        self.learning_rate = 0.;
        self.batch_size = 0;
        self.epochs = 0;
        self.dp = false;
        self.epsilon = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SwitchConfig {
        static instance: SwitchConfig = SwitchConfig {
            learning_rate: 0.,
            batch_size: 0,
            epochs: 0,
            dp: false,
            epsilon: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SwitchConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SwitchConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SwitchConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto3/switch_config.proto\"\x94\x01\n\x0cSwitchConfig\x12#\n\rlea\
    rning_rate\x18\x01\x20\x01(\x02R\x0clearningRate\x12\x1d\n\nbatch_size\
    \x18\x02\x20\x01(\x05R\tbatchSize\x12\x16\n\x06epochs\x18\x03\x20\x01(\
    \x05R\x06epochs\x12\x0e\n\x02dp\x18\x04\x20\x01(\x08R\x02dp\x12\x18\n\
    \x07epsilon\x18\x05\x20\x01(\x02R\x07epsilonJ\xbd\x02\n\x06\x12\x04\0\0\
    \x0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x03\0\
    \x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x14\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x05\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x04\t\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x05\n\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x05\x1a\x1b\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\x19\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x07\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x07\n\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x17\x18\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\t\x04\x15\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\n\x10\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\t\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x0b\x04\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x04\x08\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x0b\t\x0b\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0b\x0e\x0f\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x04\x16\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\r\n\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SwitchConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
