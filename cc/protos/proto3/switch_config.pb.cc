// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3/switch_config.proto

#include "proto3/switch_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SwitchConfig::SwitchConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.learning_rate_)*/0
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_.epochs_)*/0
  , /*decltype(_impl_.dp_)*/false
  , /*decltype(_impl_.epsilon_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchConfigDefaultTypeInternal() {}
  union {
    SwitchConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchConfigDefaultTypeInternal _SwitchConfig_default_instance_;
static ::_pb::Metadata file_level_metadata_proto3_2fswitch_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto3_2fswitch_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto3_2fswitch_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_proto3_2fswitch_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _impl_.learning_rate_),
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _impl_.epochs_),
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _impl_.dp_),
  PROTOBUF_FIELD_OFFSET(::SwitchConfig, _impl_.epsilon_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SwitchConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SwitchConfig_default_instance_._instance,
};

const char descriptor_table_protodef_proto3_2fswitch_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032proto3/switch_config.proto\"f\n\014SwitchCo"
  "nfig\022\025\n\rlearning_rate\030\001 \001(\002\022\022\n\nbatch_siz"
  "e\030\002 \001(\005\022\016\n\006epochs\030\003 \001(\005\022\n\n\002dp\030\004 \001(\010\022\017\n\007e"
  "psilon\030\005 \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto3_2fswitch_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto3_2fswitch_5fconfig_2eproto = {
    false, false, 140, descriptor_table_protodef_proto3_2fswitch_5fconfig_2eproto,
    "proto3/switch_config.proto",
    &descriptor_table_proto3_2fswitch_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_proto3_2fswitch_5fconfig_2eproto::offsets,
    file_level_metadata_proto3_2fswitch_5fconfig_2eproto, file_level_enum_descriptors_proto3_2fswitch_5fconfig_2eproto,
    file_level_service_descriptors_proto3_2fswitch_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto3_2fswitch_5fconfig_2eproto_getter() {
  return &descriptor_table_proto3_2fswitch_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto3_2fswitch_5fconfig_2eproto(&descriptor_table_proto3_2fswitch_5fconfig_2eproto);

// ===================================================================

class SwitchConfig::_Internal {
 public:
};

SwitchConfig::SwitchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SwitchConfig)
}
SwitchConfig::SwitchConfig(const SwitchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.learning_rate_){}
    , decltype(_impl_.batch_size_){}
    , decltype(_impl_.epochs_){}
    , decltype(_impl_.dp_){}
    , decltype(_impl_.epsilon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.learning_rate_, &from._impl_.learning_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.epsilon_) -
    reinterpret_cast<char*>(&_impl_.learning_rate_)) + sizeof(_impl_.epsilon_));
  // @@protoc_insertion_point(copy_constructor:SwitchConfig)
}

inline void SwitchConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.learning_rate_){0}
    , decltype(_impl_.batch_size_){0}
    , decltype(_impl_.epochs_){0}
    , decltype(_impl_.dp_){false}
    , decltype(_impl_.epsilon_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchConfig::~SwitchConfig() {
  // @@protoc_insertion_point(destructor:SwitchConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwitchConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SwitchConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.learning_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.epsilon_) -
      reinterpret_cast<char*>(&_impl_.learning_rate_)) + sizeof(_impl_.epsilon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float learning_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 epochs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float epsilon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SwitchConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_learning_rate = this->_internal_learning_rate();
  uint32_t raw_learning_rate;
  memcpy(&raw_learning_rate, &tmp_learning_rate, sizeof(tmp_learning_rate));
  if (raw_learning_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_learning_rate(), target);
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // int32 epochs = 3;
  if (this->_internal_epochs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_epochs(), target);
  }

  // bool dp = 4;
  if (this->_internal_dp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_dp(), target);
  }

  // float epsilon = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = this->_internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_epsilon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SwitchConfig)
  return target;
}

size_t SwitchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SwitchConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float learning_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_learning_rate = this->_internal_learning_rate();
  uint32_t raw_learning_rate;
  memcpy(&raw_learning_rate, &tmp_learning_rate, sizeof(tmp_learning_rate));
  if (raw_learning_rate != 0) {
    total_size += 1 + 4;
  }

  // int32 batch_size = 2;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // int32 epochs = 3;
  if (this->_internal_epochs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_epochs());
  }

  // bool dp = 4;
  if (this->_internal_dp() != 0) {
    total_size += 1 + 1;
  }

  // float epsilon = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = this->_internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchConfig::GetClassData() const { return &_class_data_; }


void SwitchConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchConfig*>(&to_msg);
  auto& from = static_cast<const SwitchConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SwitchConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_learning_rate = from._internal_learning_rate();
  uint32_t raw_learning_rate;
  memcpy(&raw_learning_rate, &tmp_learning_rate, sizeof(tmp_learning_rate));
  if (raw_learning_rate != 0) {
    _this->_internal_set_learning_rate(from._internal_learning_rate());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_epochs() != 0) {
    _this->_internal_set_epochs(from._internal_epochs());
  }
  if (from._internal_dp() != 0) {
    _this->_internal_set_dp(from._internal_dp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_epsilon = from._internal_epsilon();
  uint32_t raw_epsilon;
  memcpy(&raw_epsilon, &tmp_epsilon, sizeof(tmp_epsilon));
  if (raw_epsilon != 0) {
    _this->_internal_set_epsilon(from._internal_epsilon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchConfig::CopyFrom(const SwitchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SwitchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchConfig::IsInitialized() const {
  return true;
}

void SwitchConfig::InternalSwap(SwitchConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchConfig, _impl_.epsilon_)
      + sizeof(SwitchConfig::_impl_.epsilon_)
      - PROTOBUF_FIELD_OFFSET(SwitchConfig, _impl_.learning_rate_)>(
          reinterpret_cast<char*>(&_impl_.learning_rate_),
          reinterpret_cast<char*>(&other->_impl_.learning_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2fswitch_5fconfig_2eproto_getter, &descriptor_table_proto3_2fswitch_5fconfig_2eproto_once,
      file_level_metadata_proto3_2fswitch_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SwitchConfig*
Arena::CreateMaybeMessage< ::SwitchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SwitchConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
